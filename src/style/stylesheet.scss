@use '_variables';
@use '_popup';
@use '_options';

::-webkit-scrollbar {
	width: 0.85rem;
	height: 0.85rem;
}

::-webkit-scrollbar-button {
	display: none;
}

::-webkit-scrollbar-thumb {
	background-color: variables.$darker-grey;
	border-radius: 10px;
	cursor: pointer;
	border: 3px solid transparent;
	background-clip: content-box;
	min-height: 40%;
	max-height: 60%;

	&:hover {
		background-color: variables.$darkest-grey;
	}
}

::-webkit-scrollbar-track {
	background: transparent;
}

::-webkit-scrollbar-corner {
	background: transparent;
}

.hidden {
	display: none !important;
}

html {
	background-color: variables.$background;
	color: variables.$text-colour;
	font-family: ui-sans-serif,
		system-ui,
		-apple-system,
		BlinkMacSystemFont,
		'Segoe UI',
		'Roboto',
		'Oxygen',
		'Ubuntu',
		'Cantarell',
		'Fira Sans',
		'Droid Sans',
		'Helvetica Neue',
		'Noto Sans',
		sans-serif;
	overflow: overlay;

	body {
		margin: 2rem 1.5rem;
		font-size: 12px;
	}
}

h2 {
	font-size: 1.45em;
	letter-spacing: 0.025em;
	padding-inline-start: calc(0.125 * variables.$border-radius);
}

h3 {
	color: variables.$grey-text-colour;
	font-size: 1.15em;
	margin-block-start: 0.83em;
	margin-block-end: 0.23rem;
	letter-spacing: 0.05em;
	padding-inline-start: calc(0.125 * variables.$border-radius);
}

h2,
h3 {
	text-transform: uppercase;
}

a {
	color: rgba(255, 255, 255, 0.5);
	text-decoration: none;

	&:hover {
		color: rgba(255, 255, 255, 0.75);
	}
}

.row {
	display: flex;
	flex-direction: row;
	justify-content: space-around;
	gap: calc(2 * variables.$margin);
	width: 100%;

	&>* {
		width: 100%;
	}

	&>.row-half {
		flex-basis: 50%;
	}
}

.tile {
	display: flex;
	flex-direction: column;
	justify-content: space-around;
	gap: calc(3 * variables.$margin);
	background-color: variables.$dark-grey;
	border-radius: variables.$border-radius;
	margin: variables.$margin 0;
	padding: calc(4 * variables.$margin);

	&>* {
		height: 100%;
	}

	.row>* {
		margin: 0;
	}

	.button {
		background-color: variables.$darker-grey;

		&:hover {
			background-color: variables.$darkest-grey;
		}
	}
}

.button-icon {
	width: fit-content;
	position: absolute;
	left: 24px;
	vertical-align: middle;
	fill: variables.$light-grey-text-colour;
	width: 16px;
	height: 16px;
}

@mixin coloured-button($text, $background, $text-hover, $background-hover, $shadow, $text-active, $background-active) {
	color: $text;
	background-color: $background;
	border: variables.$border-width solid rgba(0, 0, 0, 0.125);

	&:hover,
	&:focus-visible {
		outline: none;
		color: $text-hover;
		background-color: $background-hover;
		box-shadow: 0 0 0 0.2rem $shadow;
	}

	&:active {
		color: $text-active;
		background-color: $background-active;
	}

	&.hover {
		color: variables.$text-colour;
		background-color: variables.$darker-grey;

		&:hover,
		&:focus-visible {
			outline: none;
			color: $text-hover;
			background-color: $background-hover;
			box-shadow: 0 0 0 0.2rem $shadow;
		}

		&:active {
			color: $text-active;
			background-color: $background-active;
		}
	}

	&.outline {
		padding: calc(variables.$button-padding + variables.$border-width);
		color: $background;
		border-color: $background;
		background-color: unset;
		font-weight: 600;

		&:hover,
		&:focus-visible {
			outline: none;
			border-color: rgba(0, 0, 0, 0.125);
			background-color: $background-hover;
			color: $text-hover;
		}

		&:active {
			color: $text-active;
			border-color: rgba(0, 0, 0, 0.125);
			background-color: $background-active;
		}
	}
}

.button {
	@include coloured-button(variables.$text-colour, variables.$darker-grey, variables.$text-colour, variables.$darkest-grey, rgb(20 20 20 / 50%), variables.$text-colour, variables.$grey-active);

	position: relative;
	cursor: pointer;
	user-select: none;
	margin: variables.$margin 0;
	padding: variables.$button-padding;
	display: inline-block;
	text-align: center;
	font-family: inherit;
	font-size: 0.825rem;
	text-decoration: none;
	border-radius: variables.$border-radius;
	box-sizing: border-box;
	transition: color 0.15s ease-in-out,
		background-color 0.15s ease-in-out,
		border-color 0.15s ease-in-out,
		box-shadow 0.15s ease-in-out;

	label {
		cursor: pointer;
	}

	&.accent {
		@include coloured-button(variables.$accent, variables.$darker-grey, white, variables.$accent-complement, rgb(229 60 46 / 17.5%), white, variables.$accent);

		&.emphasis {
			border-color: variables.$accent  !important;
			margin: calc(0.0625em + variables.$margin) 0;
		}
	}

	&.red {
		@include coloured-button(white, variables.$red, white, variables.$red-hover, rgb(255 0 0 / 15%), white, variables.$red-active);
	}

	&.green {
		@include coloured-button(black, variables.$green, black, variables.$green-hover, rgb(0 184 0 / 27.5%), black, variables.$green-active);

		font-weight: 600;
	}

	&.emphasis {
		font-weight: 700 !important;
		padding: 10px !important;
	}

	&:disabled {
		cursor: not-allowed !important;
	}
}

label:not(.button label, .segmented-control label) {
	text-transform: uppercase;
	letter-spacing: 0.06em;
	color: variables.$light-grey-text-colour;
	font-weight: 500;
	margin-inline-start: 20px;
	font-size: 0.75rem;
}

label.required {
	position: relative;
}

label.required:before {
	content: '*';
	color: red;
	position: absolute;
	top: 0;
	right: 100%;
}

.tile {

	input,
	textarea,
	select {
		margin-bottom: 0;
	}

	.row {

		&>input,
		&>textarea,
		&>select {
			margin-top: calc(2 * variables.$margin);
		}
	}

	.segmented-control-wrapper {
		padding-bottom: 0;
	}
}

input,
textarea,
select {
	margin-top: calc(2 * variables.$margin);
	margin-bottom: calc(5 * variables.$margin);
	padding: 8px 20px;
	align-items: center;
	font-family: monospace;
	font-size: 0.75rem;
	background-color: variables.$darker-grey;
	color: variables.$light-grey-text-colour;
	border-radius: variables.$border-radius;
	border: variables.$border-width solid rgba(0, 0, 0, 0.125);
	box-sizing: border-box;
	transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

	&::-webkit-scrollbar-thumb {
		background-color: variables.$dark-grey;

		&:hover {
			background-color: variables.$light-grey;
		}
	}

	&:focus {
		box-shadow: 0 0 0 0.2rem rgb(20 20 20 / 50%);
		background-color: variables.$darkest-grey;
	}

	&:focus-visible {
		outline: none;
	}

	&.invalid-input {
		box-shadow: 0 0 0 0.2rem rgb(255 0 0 / 27.5%);

		&:focus {
			box-shadow: 0 0 0 0.2rem rgb(255 0 0 / 15%);
		}
	}
}

textarea {
	min-height: 75px;
	min-width: 100%;
	max-width: 100%;
	border-radius: variables.$border-radius;
	text-align: center;
}

.invalid-input-error,
.validating-input-status {
	display: block;
	margin-block-start: calc(1.5 * variables.$margin);
	margin-block-end: 0.125em;
	margin-inline-start: 20px;
}

.invalid-input-error {
	color: rgb(255, 25, 25);
}

.validating-input-status {
	color: rgb(25, 255, 25);
}

.segmented-control-wrapper {
	padding-top: calc(2.5 * variables.$margin);
	padding-bottom: calc(4 * variables.$margin);

	.segmented-control {
		display: flex;
		width: 100%;
		position: relative;
		user-select: none;
		z-index: 1;
		border: 0;
		border-radius: variables.$border-radius;
		background-color: variables.$darker-grey;
		color: variables.$text-colour;

		&>input {
			display: none;

			&:checked+label {
				color: variables.$accent-complement;
				font-weight: 700;
			}

			&:hover+label {
				font-weight: 700;
			}

			&:nth-of-type(1) {
				&:checked~label:last-of-type:before {
					transform: translateX(calc(-1 * variables.$border-width));
				}

				&:active~label:last-of-type:before {
					transform: translateX(calc(-1 * variables.$border-width));
				}
			}

			&:nth-of-type(2) {
				&:checked~label:last-of-type:before {
					transform: translateX(calc(100% - 3 * variables.$border-width));
				}

				&:active~label:last-of-type:before {
					transform: translateX(calc(100% - 3 * variables.$border-width));
				}
			}
		}

		label {
			flex: 1;
			text-align: center;
			text-overflow: ellipsis;
			color: variables.$light-grey-text-colour;
			white-space: nowrap;
			overflow: hidden;
			cursor: pointer;
			padding: calc(variables.$button-padding + variables.$border-width);
			border-radius: variables.$border-radius;

			&:last-of-type:before {
				content: '';
				display: block;
				max-width: calc(50%);
				margin: 0;
				position: absolute;
				top: 0;
				right: 0;
				bottom: 0;
				left: 0;
				z-index: -1;
				transform: translateX(0);
			}

			&:before {
				transition: all 250ms cubic-bezier(0, 0.95, 0.38, 0.98);
				border-radius: variables.$border-radius;
				border: variables.$border-width solid variables.$accent
			}
		}
	}
}